<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on SSAFY 서울 CS 스터디 블로그</title>
        <link>https://SSAFY-Seoul-CS-Study.github.io/post/</link>
        <description>Recent content in Posts on SSAFY 서울 CS 스터디 블로그</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 04 Feb 2023 23:29:59 +0900</lastBuildDate><atom:link href="https://SSAFY-Seoul-CS-Study.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>힙(Heap)의 동작방식과 시간복잡도를 설명해주세요</title>
        <link>https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</link>
        <pubDate>Sat, 04 Feb 2023 23:29:59 +0900</pubDate>
        
        <guid>https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</guid>
        <description>&lt;h2 id=&#34;힙heap-이란&#34;&gt;&lt;strong&gt;힙(Heap) 이란&lt;/strong&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;우선순위 큐를 구현하기 위해 만들어진 완전 이진 트리형 자료구조&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled.png&#34;
	width=&#34;392&#34;
	height=&#34;167&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled_hub6a28ef043ffaa807b02b462e7d09758_18698_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled_hub6a28ef043ffaa807b02b462e7d09758_18698_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;https://gmlwjd9405.github.io/2018/05/10/data-structure-heap.html&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;234&#34;
		data-flex-basis=&#34;563px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;추가된 값들 중에서 최댓값이나 최솟값을 빠르게 찾을 수 있음&lt;/li&gt;
&lt;li&gt;이진 탐색 트리와 달리 느슨한 반정렬 상태를 유지함&lt;/li&gt;
&lt;li&gt;또한 중복된 값의 추가를 허용함&lt;/li&gt;
&lt;li&gt;배열과 리스트에 비해 평균적으로 더 나은 효율을 보여줌&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;종류&#34;&gt;&lt;strong&gt;종류&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1.png&#34;
	width=&#34;715&#34;
	height=&#34;285&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1_huc43ce76f62f30e181ae733bfd338851c_35011_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1_huc43ce76f62f30e181ae733bfd338851c_35011_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;https://gmlwjd9405.github.io/2018/05/10/data-structure-heap.html&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;250&#34;
		data-flex-basis=&#34;602px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;최소 힙 (부모노드 ≤ 자식노드 &amp;amp;&amp;amp; 루트노드 == MAX)&lt;/li&gt;
&lt;li&gt;최대 힙 (부모노드 ≥ 자식노드 &amp;amp;&amp;amp; 루트노드 == MAX)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;동작방식&#34;&gt;동작방식&lt;/h2&gt;
&lt;h3 id=&#34;1-데이터의-추가&#34;&gt;1. 데이터의 추가&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2.png&#34;
	width=&#34;732&#34;
	height=&#34;858&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2_hu20f5e4d1afda37ca99bbf8a65e7c9d30_106246_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2_hu20f5e4d1afda37ca99bbf8a65e7c9d30_106246_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;https://gmlwjd9405.github.io/2018/05/10/data-structure-heap.html&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;85&#34;
		data-flex-basis=&#34;204px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;인덱스를 2로 나눈 값의 노드와 비교 (부모노드와 비교)&lt;/li&gt;
&lt;li&gt;루트 노드까지 비교하는 경우, 시간 복잡도가 log(n)으로 최대이다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;데이터의-삭제&#34;&gt;데이터의 삭제&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled3.png&#34;
	width=&#34;726&#34;
	height=&#34;869&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled3_hu2bbfd3898eb32884db71c11b1946c922_116021_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%ED%9E%99heap%EC%9D%98-%EB%8F%99%EC%9E%91%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%8B%9C%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84%EB%A5%BC-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled3_hu2bbfd3898eb32884db71c11b1946c922_116021_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;https://gmlwjd9405.github.io/2018/05/10/data-structure-heap.html&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;83&#34;
		data-flex-basis=&#34;200px&#34;
	
&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;삭제 시 인덱스가 가장 높은 값이 루트노드를 대체&lt;/li&gt;
&lt;li&gt;이후 자식 노드들과 비교하며 큰 값과 자리를 교환한다.&lt;/li&gt;
&lt;li&gt;가장 아래까지 내려가는 경우 시간 복잡도가 log(n)으로 최대이다.&lt;/li&gt;
&lt;li&gt;힙은 우선순위 큐를 토대로 한 자료구조이므로 중간값 삭제 및 추가는 고려하지 않는다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;추가-구현방법&#34;&gt;추가) 구현방법&lt;/h2&gt;
&lt;p&gt;: 완전 이진 트리를 기반으로 하므로, 배열 상에서 구현이 가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;JAVA로 구현한 코드&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;24
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;25
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;26
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;27
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;28
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;29
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;30
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;31
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;32
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;33
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;34
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;35
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;36
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;37
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;38
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;39
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;40
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;41
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;42
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* 최대힙 삽입 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;insert_max_heap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;maxHeap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 힙 크기를 하나 증가하고 마지막 노드에 x를 넣는다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;c1&#34;&gt;// 마지막 노드가 자신의 부모 노드보다 크면 swap
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxHeap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxHeap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    &lt;span class=&#34;n&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* 최대힙 삭제 */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;delete_max_heap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(){&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapSize&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 배열이 빈 경우
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxHeap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 루트 노드의 값을 저장한다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;maxHeap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxHeap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;];&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 마지막 노드의 값을 루트 노드에 둔다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	&lt;span class=&#34;n&#34;&gt;maxHeap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;--]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// 힙 크기를 하나 줄이고 마지막 노드를 0으로 초기화한다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;heapSize&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;c1&#34;&gt;// 마지막 노드가 왼쪽 노드와 오른쪽 노드보다 크면 반복문을 나간다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxHeap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxHeap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxHeap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxHeap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;c1&#34;&gt;// 왼쪽 노드가 더 큰 경우, 왼쪽 노드와 마지막 노드를 swap
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;maxHeap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;maxHeap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;])&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    &lt;span class=&#34;n&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;c1&#34;&gt;// 오른쪽 노드가 더 큰 경우, 오른쪽 노드와 마지막 노드를 swap
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;	  &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    &lt;span class=&#34;n&#34;&gt;swap&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	    &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	  &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>B트리(B Tree) 와 B&#43;트리(B&#43; Tree) 의 차이점을 설명해주세요</title>
        <link>https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</link>
        <pubDate>Sat, 04 Feb 2023 23:29:58 +0900</pubDate>
        
        <guid>https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</guid>
        <description>&lt;h2 id=&#34;b-트리란&#34;&gt;B 트리란?&lt;/h2&gt;
&lt;h3 id=&#34;balanced-tree&#34;&gt;Balanced Tree&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled.png&#34;
	width=&#34;1464&#34;
	height=&#34;752&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled_hue58292474f2e89bf89c04ee4ba0c6b04_195630_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled_hue58292474f2e89bf89c04ee4ba0c6b04_195630_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;트리의 밸런스가 맞지 않을 경우의 시각화&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;194&#34;
		data-flex-basis=&#34;467px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Balanced Tree : 자료의 추가 / 삭제가 발생했을 때 스스로 균형을 유지하는 트리구조&lt;/li&gt;
&lt;li&gt;이진 트리에서 좌우의 균형이 안 맞는 경우 탐색에 낭비가 발생하기 때문에 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;위 그림에서 Balanced tree인 좌측 그림은 데이터 탐색의 시간 복잡도가 O(log n)인데 비해&lt;br&gt;
우측의 트리 구조에서는 데이터 탐색의 시간 복잡도가 O(n)이 된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;b트리-vs-이진트리&#34;&gt;B트리 vs. 이진트리&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1.png&#34;
	width=&#34;600&#34;
	height=&#34;251&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1_huf851fcb3999c88f379d3195a11fed368_182525_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1_huf851fcb3999c88f379d3195a11fed368_182525_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;B트리와 이진트리의 시각화&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;239&#34;
		data-flex-basis=&#34;573px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;B 트리와 이진트리의 차이점&lt;/p&gt;
&lt;p&gt;B 트리에서는 하나의 노드에 여러 개의 자료가 들어간다.&lt;/p&gt;
&lt;p&gt;반면, 이진트리에서는 하나의 노드엔 하나의 자료만 들어간다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-특징&#34;&gt;3) 특징&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;M차 B트리&lt;br&gt;
ex) 3차 B트리를 예시로 했을 때 B트리의 특징&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;3차이기 때문에 자식 노드를 최대 3개 까지 가질 수 있다.&lt;/li&gt;
&lt;li&gt;항상 정렬된 상태&lt;/li&gt;
&lt;li&gt;노드 안에 X개의 데이터가 있다면 자식 노드의 수는 X+1개&lt;/li&gt;
&lt;li&gt;자식노드의 데이터는 부모의 데이터에 따라서 배치된다.(부모보다 작으면 왼쪽, 크면 오른쪽)&lt;/li&gt;
&lt;li&gt;모든 리프노드의 데이터 수는 2이하(M-1이하)이다.  —&amp;gt; 리프노드 : 자식이 없는 노드.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2.png&#34;
	width=&#34;1125&#34;
	height=&#34;349&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2_hub678d71e7118f484cd428ee676e99eab_45190_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2_hub678d71e7118f484cd428ee676e99eab_45190_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;3차 B트리 시각화&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;322&#34;
		data-flex-basis=&#34;773px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;b-트리-vs-b-트리&#34;&gt;B 트리 vs B+ 트리&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;B트리&lt;/th&gt;
&lt;th&gt;B+ 트리&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;연결리스트 유무&lt;/td&gt;
&lt;td&gt;X&lt;/td&gt;
&lt;td&gt;O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;→ 전체 데이터를 차례로 처리할 수 있음&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;저장 방식&lt;/td&gt;
&lt;td&gt;각 노드에 key, data 저장&lt;/td&gt;
&lt;td&gt;각 노드에 key 저장,&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;data는 리프 노드에만 저장&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;부모 key와 리프노드 첫번째 key의 관계&lt;/td&gt;
&lt;td&gt;부모 key &amp;lt; 리프노드 첫 번째 key&lt;/td&gt;
&lt;td&gt;부모 key ≤ 리프노드 첫 번째 key&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;b트리와-b트리의-차이점&#34;&gt;B트리와 B+트리의 차이점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;연결리스트의 유무&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;B트리는 연결리스트가 없지만 B+트리는 리프노드가 연결리스트를 이룬다.&lt;br&gt;
따라서 B+트리는 전체 데이터를 차례로 처리가 가능하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;key와 data의 저장 방식&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;B 트리에서는 각 노드에 key와 data를 저장&lt;br&gt;
B+ 트리에서는 각 노드에 key를 저장하지만 data는 모두 리프노드에 저장되어 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;부모 key와 리프노트 첫번째 key의 관계&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;B트리에서는 리프노드의 첫 번째 key는 무조건 부모노드의 key보다 크지만&lt;br&gt;
B+트리는 삽입 과정에서 리프노드에 있던것이 부모노드로 올라갈 수 있기 때문에&lt;br&gt;
리프노드의 첫 번째 key가 부모노드의 key보다 크거나 같다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2.png&#34;
	width=&#34;1125&#34;
	height=&#34;349&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2_hub678d71e7118f484cd428ee676e99eab_45190_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2_hub678d71e7118f484cd428ee676e99eab_45190_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;B 트리&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;322&#34;
		data-flex-basis=&#34;773px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled3.png&#34;
	width=&#34;804&#34;
	height=&#34;257&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled3_hu696c3a8a67be0a4c1ac0e7b7ac645c17_130527_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled3_hu696c3a8a67be0a4c1ac0e7b7ac645c17_130527_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;B&amp;#43; 트리&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;750px&#34;
	
&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;저장 방식&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled4.png&#34;
	width=&#34;1125&#34;
	height=&#34;647&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled4_hu9afd397af287c4feff924b1eca49866a_253319_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled4_hu9afd397af287c4feff924b1eca49866a_253319_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;인덱스 노드를 통해 이동&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;173&#34;
		data-flex-basis=&#34;417px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled3.png&#34;
	width=&#34;804&#34;
	height=&#34;257&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled3_hu696c3a8a67be0a4c1ac0e7b7ac645c17_130527_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/b%ED%8A%B8%EB%A6%ACb-tree-%EC%99%80-b-%ED%8A%B8%EB%A6%ACb-tree-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled3_hu696c3a8a67be0a4c1ac0e7b7ac645c17_130527_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;B&amp;#43; 트리&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;312&#34;
		data-flex-basis=&#34;750px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;참고 자료&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;B트리&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://velog.io/@emplam27/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-B-Tree&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://velog.io/@emplam27/자료구조-그림으로-알아보는-B-Tree&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B+ 트리&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://velog.io/@emplam27/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-B-Plus-Tree&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://velog.io/@emplam27/자료구조-그림으로-알아보는-B-Plus-Tree&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;B트리, B+트리의 자료 추가/삽입&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=ysb9BUyVcjw&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=ysb9BUyVcjw&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>완전 이진트리 구조를 배열로 어떻게 구현할 수 있을지 설명해주세요</title>
        <link>https://SSAFY-Seoul-CS-Study.github.io/p/%EC%99%84%EC%A0%84-%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EB%B0%B0%EC%97%B4%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</link>
        <pubDate>Mon, 30 Jan 2023 22:01:05 +0900</pubDate>
        
        <guid>https://SSAFY-Seoul-CS-Study.github.io/p/%EC%99%84%EC%A0%84-%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EB%B0%B0%EC%97%B4%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</guid>
        <description>&lt;h2 id=&#34;완전이진트리란&#34;&gt;완전이진트리란?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%99%84%EC%A0%84-%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EB%B0%B0%EC%97%B4%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_205217_Whale.jpg&#34;
	width=&#34;1080&#34;
	height=&#34;474&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%99%84%EC%A0%84-%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EB%B0%B0%EC%97%B4%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_205217_Whale_hu5906e591e539aef33dcc328afc1b75b8_88710_480x0_resize_q75_box.jpg 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EC%99%84%EC%A0%84-%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EB%B0%B0%EC%97%B4%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_205217_Whale_hu5906e591e539aef33dcc328afc1b75b8_88710_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;https://velog.io/@hanif/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0-%EC%9D%B4%EC%A7%84-%ED%8A%B8%EB%A6%AC&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;227&#34;
		data-flex-basis=&#34;546px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;완전 : 마지막 레벨을 제외한 모든 레벨이 가득찼으며, 마지막 레벨은 왼쪽부터 채워지는&lt;/p&gt;
&lt;p&gt;이진 : 자식 노드의 개수가 최대 2개인&lt;/p&gt;
&lt;p&gt;트리 : 1개의 뿌리 노드에서 시작하여, 뿌리 노드를 제외한 모든 노드가 부모 노드를 갖는 그래프형 자료구조&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;그래프와 달리 사이클이 존재해서는 안된다.&lt;br&gt;
사이클 : 시작 노드에서 출발해 다른 노드를 거쳐서 다시 시작 노드로 돌아오는 경로가 존재함&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;배열-위에-구현하기&#34;&gt;배열 위에 구현하기&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%99%84%EC%A0%84-%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EB%B0%B0%EC%97%B4%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_210357_Whale.jpg&#34;
	width=&#34;868&#34;
	height=&#34;700&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%99%84%EC%A0%84-%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EB%B0%B0%EC%97%B4%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_210357_Whale_huf1bfd062c87cea01d527c4229b07eb07_45604_480x0_resize_q75_box.jpg 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EC%99%84%EC%A0%84-%EC%9D%B4%EC%A7%84%ED%8A%B8%EB%A6%AC-%EA%B5%AC%EC%A1%B0%EB%A5%BC-%EB%B0%B0%EC%97%B4%EB%A1%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EA%B5%AC%ED%98%84%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_210357_Whale_huf1bfd062c87cea01d527c4229b07eb07_45604_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;https://minhamina.tistory.com/80&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;124&#34;
		data-flex-basis=&#34;297px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;1.  완전이진트리 내 각각의 노드에게 뿌리 노드부터 1씩 증가하는 인덱스를 부여한다.&lt;br&gt;
2.  이들의 규칙성을 살펴보면, 2번째 노드의 인덱스가 2일때&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;부모노드의 인덱스는 index / 2 인 1&lt;/li&gt;
&lt;li&gt;왼쪽 자식노드의 인덱스는 index * 2 인 4&lt;/li&gt;
&lt;li&gt;오른쪽 자식노드의 인덱스는 index * 2 + 1 인 5 임을 알 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.  이를 통해, 해당 노드의 인덱스에 따라 배열에 넣는다면 각 노드의 부모/자식노드에 비로 접근할 수 있는 트리구조를 배열로 구현할 수 있음을 알 수 있다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>스택(Stack) 과 큐(Queue) 가 어떻게 다른지, 활용 예시를 통해 설명해주세요</title>
        <link>https://SSAFY-Seoul-CS-Study.github.io/p/%EC%8A%A4%ED%83%9Dstack-%EA%B3%BC-%ED%81%90queue-%EA%B0%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8B%A4%EB%A5%B8%EC%A7%80-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%8B%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</link>
        <pubDate>Mon, 30 Jan 2023 22:00:50 +0900</pubDate>
        
        <guid>https://SSAFY-Seoul-CS-Study.github.io/p/%EC%8A%A4%ED%83%9Dstack-%EA%B3%BC-%ED%81%90queue-%EA%B0%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8B%A4%EB%A5%B8%EC%A7%80-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%8B%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</guid>
        <description>&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%8A%A4%ED%83%9Dstack-%EA%B3%BC-%ED%81%90queue-%EA%B0%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8B%A4%EB%A5%B8%EC%A7%80-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%8B%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_204340_Whale.jpg&#34;
	width=&#34;1080&#34;
	height=&#34;449&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%8A%A4%ED%83%9Dstack-%EA%B3%BC-%ED%81%90queue-%EA%B0%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8B%A4%EB%A5%B8%EC%A7%80-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%8B%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_204340_Whale_hua54b9cb8fbe8ff069fdb2f99fa004221_75625_480x0_resize_q75_box.jpg 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EC%8A%A4%ED%83%9Dstack-%EA%B3%BC-%ED%81%90queue-%EA%B0%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8B%A4%EB%A5%B8%EC%A7%80-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%8B%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_204340_Whale_hua54b9cb8fbe8ff069fdb2f99fa004221_75625_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;https://velog.io/@sparklingwater/JavaScript-Data-Structures-Stack-vs-Queue&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;240&#34;
		data-flex-basis=&#34;577px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;기본-개념&#34;&gt;기본 개념&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스택(Stack) : 가장 마지막으로 들어간 데이터가 가장 첫 번째로 나오는 성질을 가진 자료 구조 (LIFO)&lt;/li&gt;
&lt;li&gt;큐(Queue) : 먼저 들어간 데이터가 먼저 나오는 성질을 가진 자료 구조 (FIFO)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;스택과-큐의-차이점&#34;&gt;스택과 큐의 차이점&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;차이점&lt;/th&gt;
&lt;th&gt;스택&lt;/th&gt;
&lt;th&gt;큐&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;활용 예시&lt;/td&gt;
&lt;td&gt;웹페이지 뒤로가기, 실행취소, 프로그램 내 함수 호출 등 후입선출 방식의 작업들&lt;/td&gt;
&lt;td&gt;프로세스 대기열 관리, 게임 매칭 대기열 등 선입선출 방식의 작업들&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;삽입, 삭제 위치&lt;/td&gt;
&lt;td&gt;일치 (top)&lt;/td&gt;
&lt;td&gt;불일치 (삭제 : front, 삽입 : rear)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;데이터 조작을 고려한 최적의 구현방법&lt;/td&gt;
&lt;td&gt;ArrayList 를 활용 - 데이터를 삭제할 때 객체를 제거할 필요가 없음&lt;/td&gt;
&lt;td&gt;LinkedList 를 활용 - 데이터를 삭제할 때, 모든 데이터를 한칸씩 앞당길 필요가 없음&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>배열(ArrayList) 과 리스트(LinkedList) 는 어떤 점이 다른지 설명해주세요</title>
        <link>https://SSAFY-Seoul-CS-Study.github.io/p/%EB%B0%B0%EC%97%B4arraylist-%EA%B3%BC-%EB%A6%AC%EC%8A%A4%ED%8A%B8linkedlist-%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%A0%90%EC%9D%B4-%EB%8B%A4%EB%A5%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</link>
        <pubDate>Mon, 30 Jan 2023 21:58:41 +0900</pubDate>
        
        <guid>https://SSAFY-Seoul-CS-Study.github.io/p/%EB%B0%B0%EC%97%B4arraylist-%EA%B3%BC-%EB%A6%AC%EC%8A%A4%ED%8A%B8linkedlist-%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%A0%90%EC%9D%B4-%EB%8B%A4%EB%A5%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</guid>
        <description>&lt;h2 id=&#34;배열과-리스트의-차이점&#34;&gt;배열과 리스트의 차이점&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%B0%B0%EC%97%B4arraylist-%EA%B3%BC-%EB%A6%AC%EC%8A%A4%ED%8A%B8linkedlist-%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%A0%90%EC%9D%B4-%EB%8B%A4%EB%A5%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_200405_Whale.jpg&#34;
	width=&#34;1080&#34;
	height=&#34;573&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%B0%B0%EC%97%B4arraylist-%EA%B3%BC-%EB%A6%AC%EC%8A%A4%ED%8A%B8linkedlist-%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%A0%90%EC%9D%B4-%EB%8B%A4%EB%A5%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_200405_Whale_hu4dc01e1a335f41b9a2060fa2016b3ce6_121428_480x0_resize_q75_box.jpg 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EB%B0%B0%EC%97%B4arraylist-%EA%B3%BC-%EB%A6%AC%EC%8A%A4%ED%8A%B8linkedlist-%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%A0%90%EC%9D%B4-%EB%8B%A4%EB%A5%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_200405_Whale_hu4dc01e1a335f41b9a2060fa2016b3ce6_121428_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;https://javagoal.com/difference-between-arraylist-and-linkedlist/&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;452px&#34;
	
&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;차이점&lt;/th&gt;
&lt;th&gt;ArrayList&lt;/th&gt;
&lt;th&gt;LinkedList&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;메모리상에서 데이터 분포&lt;/td&gt;
&lt;td&gt;연속적&lt;/td&gt;
&lt;td&gt;불규칙적&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;기본 용량&lt;/td&gt;
&lt;td&gt;10 (에서 동적으로 변화)&lt;/td&gt;
&lt;td&gt;없음&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;데이터 접근 방식&lt;/td&gt;
&lt;td&gt;인덱스로 임의접근 가능&lt;/td&gt;
&lt;td&gt;리스트 전체 순회&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;데이터 구조&lt;/td&gt;
&lt;td&gt;인덱스에 값 저장&lt;/td&gt;
&lt;td&gt;노드에 이전/이후 노드 각각의 주소와 값 저장&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;성능&lt;/td&gt;
&lt;td&gt;데이터 접근이 빠름 (인덱스 활용)&lt;/td&gt;
&lt;td&gt;데이터 추가/제거 작업이 빠름 (대상 노드를 가르키는 주소값만 수정)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;배열과-리스트의-공통점&#34;&gt;배열과 리스트의 공통점&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%B0%B0%EC%97%B4arraylist-%EA%B3%BC-%EB%A6%AC%EC%8A%A4%ED%8A%B8linkedlist-%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%A0%90%EC%9D%B4-%EB%8B%A4%EB%A5%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_200110_Whale.jpg&#34;
	width=&#34;1080&#34;
	height=&#34;244&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%B0%B0%EC%97%B4arraylist-%EA%B3%BC-%EB%A6%AC%EC%8A%A4%ED%8A%B8linkedlist-%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%A0%90%EC%9D%B4-%EB%8B%A4%EB%A5%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_200110_Whale_hu4bb92a5ab956b645c45c187394b1ee9d_33543_480x0_resize_q75_box.jpg 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EB%B0%B0%EC%97%B4arraylist-%EA%B3%BC-%EB%A6%AC%EC%8A%A4%ED%8A%B8linkedlist-%EB%8A%94-%EC%96%B4%EB%96%A4-%EC%A0%90%EC%9D%B4-%EB%8B%A4%EB%A5%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Screenshot_20230130_200110_Whale_hu4bb92a5ab956b645c45c187394b1ee9d_33543_1024x0_resize_q75_box.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;선형 자료구조의 시각화&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;442&#34;
		data-flex-basis=&#34;1062px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;둘다 선형 자료구조임 (모든 데이터가 앞이나 뒤로 1:1 관계임)&lt;/li&gt;
&lt;li&gt;선언과 동시에 용량을 정해야하는 기존의 배열을 대체하기 위한 자료구조임&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>SSAFY CS Study</title>
        <link>https://SSAFY-Seoul-CS-Study.github.io/p/ssafy-cs-study/</link>
        <pubDate>Mon, 30 Jan 2023 00:17:42 +0900</pubDate>
        
        <guid>https://SSAFY-Seoul-CS-Study.github.io/p/ssafy-cs-study/</guid>
        <description>&lt;h2 id=&#34;-rule&#34;&gt;📐 Rule&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;스터디는 매주 월, 토 진행 (공휴일은 x)&lt;/li&gt;
&lt;li&gt;스터디 전날까지 학습한 CS 주제에 대해 노션으로 정리&lt;/li&gt;
&lt;li&gt;학습내용 공유는 자신이 이해한 내용을 가르치듯이 설명&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-스터디원&#34;&gt;👨‍💻 스터디원&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;이름&lt;/th&gt;
&lt;th&gt;GitHub 계정&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;박종호&lt;/td&gt;
&lt;td&gt;@TProgramer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;김민식&lt;/td&gt;
&lt;td&gt;@DUDINGDDI&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;이경호&lt;/td&gt;
&lt;td&gt;@EverydayHungry&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;이동윤&lt;/td&gt;
&lt;td&gt;@BrickGear&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;이정민&lt;/td&gt;
&lt;td&gt;@zeomzzz&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;-타임-테이블&#34;&gt;⌛ 타임 테이블&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;시간&lt;/th&gt;
&lt;th&gt;내용&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;월요일 1시간&lt;/td&gt;
&lt;td&gt;B팀 CS 주제 선정 및 A팀 설명&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;토요일 1시간&lt;/td&gt;
&lt;td&gt;A팀 CS 주제 선정 및 B팀 설명&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.notion.so/43e74b993ebf4fd4ad31817ea89818e1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;진행 현황&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;-학습-주제&#34;&gt;✏️ 학습 주제&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;학습주제는 **&lt;a class=&#34;link&#34; href=&#34;https://gyoogle.dev/blog/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;tech-interview-for-developer&lt;/a&gt;**를 참고&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/JaeYeopHan/Interview_Question_for_Beginner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/WeareSoft/tech-interview&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/WeareSoft/tech-interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/gyoogle/tech-interview-for-developer&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/gyoogle/tech-interview-for-developer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://goodgid.github.io/Prepared-for-Computer-Science/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;goodGid의 CS(= 컴퓨터 전산학) 준비 방법&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-참고---kocw-강의&#34;&gt;📽️ 참고 - KOCW 강의&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;운영체제 : &lt;a class=&#34;link&#34; href=&#34;http://www.kocw.net/home/cview.do?cid=3646706b4347ef09&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;이화여대 반효경 교수님 운영체제 강의 (2014년)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;네트워크 : &lt;a class=&#34;link&#34; href=&#34;http://www.kocw.net/home/search/kemView.do?kemId=1159726&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;한국항공대 김철기 교수님 컴퓨터 네트워크 강의 (2015년)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;컴퓨터 구조 : &lt;a class=&#34;link&#34; href=&#34;http://www.kocw.net/home/m/search/kemView.do?kemId=1389263&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;고려대 구건재 교수님 컴퓨터 구조 강의 (2020년)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;-github-pages를-통해-블로그에-게시&#34;&gt;🗒️ Github Pages를 통해 블로그에 게시&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://velog.io/@mellonggo/Github-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-with-Hugo&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo를 통한 Github 블로그 만들기&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
