<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>운영체제 on SSAFY 서울 CS 스터디 블로그</title>
        <link>https://SSAFY-Seoul-CS-Study.github.io/categories/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/</link>
        <description>Recent content in 운영체제 on SSAFY 서울 CS 스터디 블로그</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 20 Feb 2023 22:54:22 +0900</lastBuildDate><atom:link href="https://SSAFY-Seoul-CS-Study.github.io/categories/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>멀티프로세스와 멀티쓰레드는 각각 어떤건지 설명해주세요</title>
        <link>https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%80%ED%8B%B0%EC%93%B0%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%81%EA%B0%81-%EC%96%B4%EB%96%A4%EA%B1%B4%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</link>
        <pubDate>Mon, 20 Feb 2023 22:54:22 +0900</pubDate>
        
        <guid>https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%80%ED%8B%B0%EC%93%B0%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%81%EA%B0%81-%EC%96%B4%EB%96%A4%EA%B1%B4%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</guid>
        <description>&lt;h3 id=&#34;멀티-프로세스-멀티-스레드를-왜-사용할까&#34;&gt;멀티 프로세스, 멀티 스레드를 왜 사용할까?&lt;/h3&gt;
&lt;p&gt;| 단일 프로세스 시스템 | - 한 번에 하나의 프로그램만 실행&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;단점 : CPU 사용률이 좋지 않음&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;↓&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;멀티 프로그래밍&lt;/td&gt;
&lt;td&gt;- 여러 개의 프로그램을 메모리에 올려놓고 동시에 실행시킴&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;단점 : 하나의 프로세스의 CPU 사용 시간이 길어지면 다른 프로세스는 계속 대기 |
| ↓ |  |
| 멀티 태스킹 | - 멀티 프로그래밍 + 시간을 아주 짧은 시간으로 쪼개서 프로세스들을 번갈아 가면서 실행 (→ 동시에 여러 프로그램이 실행되는 것처럼 느낌) |&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;멀티 태스킹의 한계&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 프로세스가 동시에 여러 작업 수행 X → 여러 프로세스 만들어야 함
&lt;ul&gt;
&lt;li&gt;프로세스의 컨텍스트 스위칭은 무거운 작업&lt;/li&gt;
&lt;li&gt;프로세스끼지 데이터 공유 까다로움&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;듀얼 코어 등장 이후 활용 방법 필요&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;→ 멀티 프로세스, 멀티 스레딩&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;멀티-프로세스-멀티-스레드&#34;&gt;멀티 프로세스, 멀티 스레드&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;프로그래밍에서 함께 처리하기 위해 사용하는 기술
프로그램의 둘 이상의 부분을 동시에 실행하여 CPU를 최대한 활용&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;멀티-프로세스&#34;&gt;멀티 프로세스&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%80%ED%8B%B0%EC%93%B0%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%81%EA%B0%81-%EC%96%B4%EB%96%A4%EA%B1%B4%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled.png&#34;
	width=&#34;556&#34;
	height=&#34;419&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%80%ED%8B%B0%EC%93%B0%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%81%EA%B0%81-%EC%96%B4%EB%96%A4%EA%B1%B4%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled_hubfaaa651b3575368663237c640467e3f_70111_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%80%ED%8B%B0%EC%93%B0%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%81%EA%B0%81-%EC%96%B4%EB%96%A4%EA%B1%B4%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled_hubfaaa651b3575368663237c640467e3f_70111_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;132&#34;
		data-flex-basis=&#34;318px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%80%ED%8B%B0%EC%93%B0%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%81%EA%B0%81-%EC%96%B4%EB%96%A4%EA%B1%B4%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1.png&#34;
	width=&#34;658&#34;
	height=&#34;365&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%80%ED%8B%B0%EC%93%B0%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%81%EA%B0%81-%EC%96%B4%EB%96%A4%EA%B1%B4%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1_hu62bd3db07a7e4d6b252bc4fece96ccb1_156667_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%80%ED%8B%B0%EC%93%B0%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%81%EA%B0%81-%EC%96%B4%EB%96%A4%EA%B1%B4%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1_hu62bd3db07a7e4d6b252bc4fece96ccb1_156667_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;180&#34;
		data-flex-basis=&#34;432px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다수의 프로세스가 서로 협력적으로 일을 처리&lt;/li&gt;
&lt;li&gt;둘 이상의 코어가 프로세스를 병렬로 분담해서 병행하여 실행
&lt;ul&gt;
&lt;li&gt;병렬 처리 : 여러 작업을 동시에 실행&lt;/li&gt;
&lt;li&gt;병행 처리 : 하나의 코어가 여러 프로세스를 돌아가면서 조금씩 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;fork를 통해 프로세스를 다수 개로 늘려 여러 개의 프로그램들을 병렬로 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;참고) 푸드트럭에의 비유&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;병렬 처리 : 푸드 트럭에 네 대의 로봇이 있다면, 각각의 로봇이 한 종류의 버거를 맡아서 요리&lt;/li&gt;
&lt;li&gt;병행 처리 : 네 개의 버거를 두 대의 로봇이 만들 때 → 동시에 버거를 네 개 만드는 것처럼
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;로봇1&lt;/th&gt;
&lt;th&gt;빵 깔기&lt;/th&gt;
&lt;th&gt;빵 깔기&lt;/th&gt;
&lt;th&gt;패티 올리기&lt;/th&gt;
&lt;th&gt;패티 올리기&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;로봇2&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;야채 썰어 올리기&lt;/td&gt;
&lt;td&gt;야채 썰어 올리기&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;멀티-스레드&#34;&gt;멀티 스레드&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%80%ED%8B%B0%EC%93%B0%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%81%EA%B0%81-%EC%96%B4%EB%96%A4%EA%B1%B4%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2.png&#34;
	width=&#34;512&#34;
	height=&#34;205&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%80%ED%8B%B0%EC%93%B0%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%81%EA%B0%81-%EC%96%B4%EB%96%A4%EA%B1%B4%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2_hu2f161c42ab4cd609ece8cb3c97810596_7194_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%80%ED%8B%B0%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%99%80-%EB%A9%80%ED%8B%B0%EC%93%B0%EB%A0%88%EB%93%9C%EB%8A%94-%EA%B0%81%EA%B0%81-%EC%96%B4%EB%96%A4%EA%B1%B4%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2_hu2f161c42ab4cd609ece8cb3c97810596_7194_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;249&#34;
		data-flex-basis=&#34;599px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하나의 프로세스 안에서 작업을 여러 스레드를 사용하여 동시에 처리
ex. 채팅 앱 : 사용자가 메시지 입력하는 도중에도 상대방이 새로운 메시지를 보냈는지 확인&lt;/li&gt;
&lt;li&gt;하나의 프로그램 안에서 병렬 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;참고) 푸드트럭에의 비유&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;한 개의 버거를 요리하는 작업이 하나의 프로세스일 때,&lt;/li&gt;
&lt;li&gt;스레드 : 빵을 데우는 작업, 패티를 굽는 작업, 야채를 써는 작업&lt;/li&gt;
&lt;li&gt;이를 병행 처리 : 빵 오븐에 → 패티 팬에 → 토마토 썰기 → 오븐에서 빵 꺼내기 → …&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;멀티-프로세스-멀티-스레드의-활용&#34;&gt;멀티 프로세스, 멀티 스레드의 활용&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;멀티 프로세스&lt;/th&gt;
&lt;th&gt;멀티 스레드&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;장점&lt;/td&gt;
&lt;td&gt;하나의 프로세스에 문제가 생겨도 다른 프로세스에 문제가 생기지 않음&lt;/td&gt;
&lt;td&gt;컨텍스트 스위칭할 때 공유하고 있는 메모리 만큼의 메모리 자원을 아낌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;자원의 효율성 증가, 응답 속도 빨라짐&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;단점&lt;/td&gt;
&lt;td&gt;컨텍스트 스위칭이 무거움&lt;/td&gt;
&lt;td&gt;자원을 공유 → 스레드 하나가 프로세스 내 자원을 망치면 모든 프로세스가 종료됨, 동기화 문제&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;예시&lt;/td&gt;
&lt;td&gt;크롬 : 하나의 프로세스에 멀티 스레드를 사용하는 인터넷 익스플로러와 달리 여러 개의 프로세스를 사용&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;크롬 : 하나의 화면에 문제 생겨도 다른 화면에 미치는 영향 적음 | 워드 프로세서 : 문서를 편집하면서 틀린 글자를 찾는 작업을 독립적인 스레드로 구현&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;익스플로러 : 하나의 화면에 문제 생겨서 강제 종료하면 익스플로러 전체가 종료됨 |&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;참고 자료&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;멀티 프로세스, 멀티 스레딩의 등장 : &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=QmtYKZC0lMU&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.youtube.com/watch?v=QmtYKZC0lMU&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;푸드트럭 비유 : &lt;a class=&#34;link&#34; href=&#34;https://hongong.hanbit.co.kr/cpu%EA%B0%80-%EB%A9%80%ED%8B%B0%ED%83%9C%EC%8A%A4%ED%82%B9%EC%9D%84-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-vs-%EC%8A%A4%EB%A0%88%EB%93%9C/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://hongong.hanbit.co.kr/cpu가-멀티태스킹을-하는-방법-프로세스-vs-스레드/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>메모리(Memory) 가 무엇인지 설명해주세요</title>
        <link>https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</link>
        <pubDate>Mon, 20 Feb 2023 22:54:22 +0900</pubDate>
        
        <guid>https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</guid>
        <description>&lt;h2 id=&#34;메모리memory-란&#34;&gt;메모리(Memory) 란?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled.png&#34;
	width=&#34;737&#34;
	height=&#34;411&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled_hu0e48832a2d71d525cf8438d4f6550136_357469_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled_hu0e48832a2d71d525cf8438d4f6550136_357469_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;https://information-factory.tistory.com/59&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;179&#34;
		data-flex-basis=&#34;430px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;CPU가 연산하기 위한 프로그램을 일시적으로 저장하는 공간&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;메모리란 원래 컴퓨터 시스템에 무언가를 저장하는 공간 (RA&lt;strong&gt;M&lt;/strong&gt;, RO&lt;strong&gt;M&lt;/strong&gt;의 마지막 글자는 &lt;strong&gt;M&lt;/strong&gt;emory의 약자)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Hardware 반도체 소자분야에서는 크게 휘발성인 RAM과 비휘발성인 ROM으로 나뉘고 SW 입장에서는 크게 CPU 캐시메모리 / CPU 레지스터(SRAM), &lt;strong&gt;주기억장치(DRAM == 메모리)&lt;/strong&gt;, 디스크(SSD), 롬(ROM, 모니터 마우스 키보드 통신을 위한 BIOS), swap 메모리, 가상메모리, 플래시메모리(휴대저장장치인 USB메모리) 등이 있음&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;메모리dram의-특징&#34;&gt;메모리(DRAM)의 특징&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;순차접근이 아닌 &lt;strong&gt;임의접근(Random Access)&lt;/strong&gt; 방식으로 동작함&lt;/li&gt;
&lt;li&gt;DRAM 내부의 Capacitor 에 저장되는 전하는 빠르게 방전되기 때문에, 전력이 유지되지 않으면 데이터가 사라지는 &lt;strong&gt;휘발성 메모리&lt;/strong&gt;임&lt;/li&gt;
&lt;li&gt;CPU 가 디스크(SSD) 에서 데이터 처리속도를 기다리게 되는 병목현상을 해결해주는 &lt;strong&gt;빠른속도의 데이터 처리 중간지점 역할&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1.png&#34;
	width=&#34;736&#34;
	height=&#34;412&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1_huf5aeff58a5f5a03aca6f806f39342c85_207901_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1_huf5aeff58a5f5a03aca6f806f39342c85_207901_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;https://information-factory.tistory.com/59&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;178&#34;
		data-flex-basis=&#34;428px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;mmumemory-management-unit-란&#34;&gt;MMU(Memory Management Unit) 란?&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2.png&#34;
	width=&#34;600&#34;
	height=&#34;320&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2_huca02628961ff047606ded0adf2e1b58e_80307_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2_huca02628961ff047606ded0adf2e1b58e_80307_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;http://recipes.egloos.com/5232056&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;450px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;메모리 보호나 캐시 관리 등 CPU가 메모리에 접근하는 것(논리주소 → 물리주소)을 총 관리해주는 하드웨어&lt;/li&gt;
&lt;li&gt;사용자에게 더 많은 메모리 공간을 제공하기 위해, 프로그램 상에서 사용자가 보는 주소 공간인 가상 주소에서 실제 데이터가 담겨 있는 곳에 접근하기 위해선 빠른 주소 변환을 도와줌&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;MMU가 지원되지 않으면, Physical Address를 직접 접근해야 하기 때문에 부담이 있다.
→ MMU는 사용자가 기억장소를 일일이 할당해야 하는 불편을 없애준다. → 프로세스의 크기가 실제 메모리의 용량을 초과해도 실행될 수 있게 해준다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;mmu의-메모리-보호-방식&#34;&gt;MMU의 메모리 보호 방식&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;프로세스는 &lt;strong&gt;독립적인 메모리 공간&lt;/strong&gt;을 가져야 하고, 자신의 공간만 접근해야 한다.
따라서 MMU는 한 프로세스에게 합법적인 주소 영역을 설정하고, 잘못된 접근이 오면 trap을 발생시키며 보호한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;base와-limit-레지스터를-활용한-메모리-보호-기법&#34;&gt;base와 limit 레지스터를 활용한 메모리 보호 기법&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;base 레지스터&lt;/strong&gt; : 메모리상의 프로세스 시작주소를 물리 주소로 저장&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;limit 레지스터&lt;/strong&gt; : 프로세스의 사이즈를 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P.S. 레지스터란? &lt;strong&gt;프로세서가 바로 사용할 수 있는 데이터를 담고 있는 영역&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;프로세스의 접근 가능한 합법적인 메모리 영역(&lt;code&gt;x&lt;/code&gt;)은 &lt;code&gt;base &amp;lt;= x &amp;lt; base+limit&lt;/code&gt; 이 된다.
따라서 이 영역 밖에서 접근을 요구하면 trap 을 발생시킨다.
또한 안전성을 위해 base와 limit 레지스터는 사용자 모드에서는 직접 변경할 수 없도록 &lt;strong&gt;커널 모드에서만 수정 가능&lt;/strong&gt;하도록 설계되었다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled3.png&#34;
	width=&#34;600&#34;
	height=&#34;261&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled3_hu97d86d686a0b1397c3952f503f8966c8_80931_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EB%A9%94%EB%AA%A8%EB%A6%ACmemory-%EA%B0%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled3_hu97d86d686a0b1397c3952f503f8966c8_80931_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;http://recipes.egloos.com/5232056&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;229&#34;
		data-flex-basis=&#34;551px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>인터럽트(Interrupt)에 대해서 설명해주세요.</title>
        <link>https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8interrupt%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94./</link>
        <pubDate>Mon, 20 Feb 2023 22:54:22 +0900</pubDate>
        
        <guid>https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8interrupt%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94./</guid>
        <description>&lt;h2 id=&#34;인터럽트란&#34;&gt;인터럽트란?&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;CPU가 프로그램을 실행하는 도중 예기치 않은 상황이 발생할 때, 현재 실행 중인 작업을 즉시 중단하고 발생된 상황에 대해 우선적으로 처리가 필요함을 CPU에게 알리는 것&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;i.e. 우선적으로 처리해야하는 일이 발생하였다면, 그것을 처리한 후 원래 작업으로 돌아옴&lt;/p&gt;
&lt;h2 id=&#34;인터럽트의-종류&#34;&gt;인터럽트의 종류&lt;/h2&gt;
&lt;h3 id=&#34;1-하드웨어-인터럽트&#34;&gt;1. 하드웨어 인터럽트&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;가장 일반적인 인터럽트&lt;/li&gt;
&lt;li&gt;CPU외부에서 인터럽트 요구 신호에 의해 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;입출력 인터럽트(I/O interrupt)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ex. 입출력 작업의 종료나 입출력 오류에 의해 발생(키보드, 마우스, 프린터 등)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;정전, 전원 이상 인터럽트(Power fail interrupt)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ex. 전원 공급의 이상에 의해 발생&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;기계 착오 인터럽트(Machine check interrupt)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;CPU의 기능적인 오류로 인해 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;외부 신호 인터럽트(External interrupt)&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;I/O 장치가 아닌 오퍼레이터나 타이머에 의해 의도적으로 프로그램이 중단된 경우 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;소프트웨어-인터럽트&#34;&gt;소프트웨어 인터럽트&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;프로그램의 오류에 의해 생기는 인터럽트&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;e.g. trap 이나 exception 등..&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0으로 나누는 경우&lt;/li&gt;
&lt;li&gt;OverFlow/UnderFlow&lt;/li&gt;
&lt;li&gt;페이지 부재&lt;/li&gt;
&lt;li&gt;부당한 기억장소의 참조&lt;/li&gt;
&lt;li&gt;기타 등등..&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;svcsupervisor-call-interrupt&#34;&gt;SVC(SuperVisor Call) interrupt&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;일반적으로 응용프로그램은 유저모드로 실행된다.
→ 유저가 접근할 수 없는 자원에 대해 superviosr 모드로 작업을 수행한 후 유저모드로 다시 변경하는 과정을 거친다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;인터럽트의-우선순위&#34;&gt;인터럽트의 우선순위&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8interrupt%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94./images/Untitled.png&#34;
	width=&#34;536&#34;
	height=&#34;852&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8interrupt%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94./images/Untitled_hucd97ade0b9b4ec81329dc7a0355af000_77458_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8interrupt%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94./images/Untitled_hucd97ade0b9b4ec81329dc7a0355af000_77458_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;62&#34;
		data-flex-basis=&#34;150px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;인터럽트-서비스-루틴-isr&#34;&gt;인터럽트 서비스 루틴 (ISR)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;인터럽트가 접수되면 각각의 인터럽트에 대응하여 특정 기능을 처리하는 기계어 코드 루틴.
인터럽트 핸들러라고도 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;인터럽트-벡터&#34;&gt;인터럽트 벡터&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8interrupt%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94./images/Untitled1.png&#34;
	width=&#34;420&#34;
	height=&#34;279&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8interrupt%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94./images/Untitled1_hu3a8b815c53b0d35a47924f4f36fd5c32_30428_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8interrupt%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94./images/Untitled1_hu3a8b815c53b0d35a47924f4f36fd5c32_30428_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=shj1126zzang&amp;logNo=90193106131&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;150&#34;
		data-flex-basis=&#34;361px&#34;
	
&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;여러 가지 인터럽트에 대해 해당 인터럽트 발생 시 처리해야할 ISR의 주소를 보관하는 공간&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;대부분의 CPU들은 인터럽트 벡터 테이블을 가지고 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;인터럽트의-과정&#34;&gt;인터럽트의 과정&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8interrupt%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94./images/Untitled2.png&#34;
	width=&#34;530&#34;
	height=&#34;203&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8interrupt%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94./images/Untitled2_hud7b30903697ad31fdf983e4892f120ef_56240_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9D%B8%ED%84%B0%EB%9F%BD%ED%8A%B8interrupt%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94./images/Untitled2_hud7b30903697ad31fdf983e4892f120ef_56240_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;261&#34;
		data-flex-basis=&#34;626px&#34;
	
&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>프로세스(Process) 와 쓰레드(Thread) 의 차이점을 설명해주세요</title>
        <link>https://SSAFY-Seoul-CS-Study.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process-%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9Cthread-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</link>
        <pubDate>Sat, 11 Feb 2023 22:06:15 +0900</pubDate>
        
        <guid>https://SSAFY-Seoul-CS-Study.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process-%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9Cthread-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</guid>
        <description>&lt;h3 id=&#34;프로그램-program&#34;&gt;프로그램 (Program)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process-%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9Cthread-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled.png&#34;
	width=&#34;804&#34;
	height=&#34;216&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process-%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9Cthread-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled_hu3920c3e2bd36df892dd9e37e45b2c504_6538_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process-%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9Cthread-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled_hu3920c3e2bd36df892dd9e37e45b2c504_6538_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;372&#34;
		data-flex-basis=&#34;893px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;ex. 카카오톡, 웹 브라우저 등&lt;/p&gt;
&lt;h3 id=&#34;프로세스-process&#34;&gt;프로세스 (Process)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process-%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9Cthread-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1.png&#34;
	width=&#34;2991&#34;
	height=&#34;1588&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process-%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9Cthread-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1_hu2f1d035cc0d48da2e614cb94e0b34e8f_105237_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process-%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9Cthread-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1_hu2f1d035cc0d48da2e614cb94e0b34e8f_105237_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;452px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;프로세스란&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제로부터 자원을 할당받는 작업의 단위&lt;/li&gt;
&lt;li&gt;실행되고 있는 프로그램&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특징&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각각 독립된 메모리 영역을 할당 받음 (Code, Data, Stack, Heap)
&lt;ul&gt;
&lt;li&gt;코드 : 실행할 프로그램의 코드나 명령어들을 기계어 형태로 저장. 컴파일 → 메모리에 올린 것 (0100101..) 전체 일감&lt;/li&gt;
&lt;li&gt;데이터 : 생성자로 생성하지 않고 선언한 전역변수 ex. static, global&lt;/li&gt;
&lt;li&gt;힙 : 동적으로 생성된 데이터. 생성자로 만들어짐&lt;/li&gt;
&lt;li&gt;스택 : 호출된 함수, 지역변수 등 임시 데이터를 저장. 호출된 함수가 종료되었을 때 되돌아오기 위한 경로를 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로세스당 최소 1개의 스레드를 가짐&lt;/li&gt;
&lt;li&gt;한 프로세스가 다른 프로세스의 자원에 접근하려면 IPC(inter process communication)를 사용해야 함&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;스레드-thread&#34;&gt;스레드 (Thread)&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process-%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9Cthread-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2.png&#34;
	width=&#34;2991&#34;
	height=&#34;1588&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process-%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9Cthread-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2_hud72d32e3df20dbeeb166ed35faf7779d_74476_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4process-%EC%99%80-%EC%93%B0%EB%A0%88%EB%93%9Cthread-%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%84-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled2_hud72d32e3df20dbeeb166ed35faf7779d_74476_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Untitled&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;188&#34;
		data-flex-basis=&#34;452px&#34;
	
&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;스레드란?
&lt;ul&gt;
&lt;li&gt;할당 받은 자원을 이용하는 실행 단위&lt;/li&gt;
&lt;li&gt;프로세스 내에 반드시 하나 이상 생성됨 (→ 여러 개 생길 수 있음)&lt;/li&gt;
&lt;li&gt;함수를 실행한 결과를 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;특징
&lt;ul&gt;
&lt;li&gt;프로세스 내에서 각각 Stack만 따로 할당 받고, Code, Data, Heap 영역은 공유&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=iks_Xb9DtTM&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;프로세스와 스레드 비유 : 요리&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램 : 레시피&lt;/li&gt;
&lt;li&gt;프로세서 : 요리사 (프로세스가 동작될 수 있도록 하는 하드웨어 (=cpu))&lt;/li&gt;
&lt;li&gt;프로세스 : 대량 주문이 들어오는 식당에서 끊임없이 만들어내는 각각의 요리 메뉴&lt;/li&gt;
&lt;li&gt;컴퓨터는 프로세스마다 자원을 분할해서 할당함 ex. 라면 끓이는 섹션, 김밥 마는 섹션, 햄버거 만드는 섹션&lt;/li&gt;
&lt;li&gt;라면 끓이는 섹션에 버너 4개 있다면 스레드도 4개를 만들어서 라면이 최대 4개까지 동시에 끓여지도록 프로그래밍&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;프로세스-vs-스레드&#34;&gt;프로세스 vs. 스레드&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;프로세스&lt;/th&gt;
&lt;th&gt;스레드&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;자원을 공유하지 않음 (독립된 메모리 영역을 할당)&lt;/td&gt;
&lt;td&gt;자원을 공유 (Code, Data, Heap 영역)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;↓&lt;/td&gt;
&lt;td&gt;↓&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;다른 프로세스와 정보 공유를 위해 IPC를 사용&lt;/td&gt;
&lt;td&gt;다른 스레드와 정보 공유가 용이&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;하나의 프로세스에 문제가 생겨도 다른 프로세스에 영향을 미치지 않음&lt;/td&gt;
&lt;td&gt;한 스레드에 문제가 생기면 전체 프로세스에도 영향을 미침&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>운영체제(OS, Operating System)란 무엇인지 설명해주세요</title>
        <link>https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9Cos-operating-system%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</link>
        <pubDate>Sat, 11 Feb 2023 22:06:14 +0900</pubDate>
        
        <guid>https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9Cos-operating-system%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/</guid>
        <description>&lt;blockquote&gt;
&lt;p&gt;운영체제는 &lt;strong&gt;시스템 자원을 관리&lt;/strong&gt;하여 사용자가 &lt;strong&gt;하드웨어의 기능을 이용&lt;/strong&gt;하고 &lt;strong&gt;응용프로그램을 실행&lt;/strong&gt;할 수 있도록 도와주는 &lt;strong&gt;소프트웨어(또는 인터페이스)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;P.S. 운영체제를 구성하는 프로그램들 중 상시 메모리에 상주하는 것이 &lt;strong&gt;커널(Kernel)&lt;/strong&gt;&lt;!-- raw HTML omitted --&gt;&lt;!-- raw HTML omitted --&gt;&lt;/p&gt;
&lt;h2 id=&#34;운영체제의-종류&#34;&gt;운영체제의 종류&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9Cos-operating-system%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled.png&#34;
	width=&#34;1280&#34;
	height=&#34;919&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9Cos-operating-system%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled_hu86cb94cc1893f5569191bb786e379a44_349276_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9Cos-operating-system%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled_hu86cb94cc1893f5569191bb786e379a44_349276_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;다양한 운영체제 종류&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;139&#34;
		data-flex-basis=&#34;334px&#34;
	
&gt;&lt;/p&gt;
&lt;h2 id=&#34;운영체제의-목적&#34;&gt;운영체제의 목적&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;아래 목적들은 운영체제의 성능을 평가하는 기준이 된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;처리능력(Throughput)&lt;/strong&gt; : 일정 시간 내에 시스템이 처리하는 일의 양&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;반환시간(Turn Around Time)&lt;/strong&gt; : 시스템에 작업을 의뢰한 시간부터 처리가 완료될 때까지 걸린 시간&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;사용가능도(Availability)&lt;/strong&gt; : 시스템을 사용할 필요가 있을 때 즉시 사용 가능한 정도&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;신뢰도(Reliabilty)&lt;/strong&gt; : 시스템이 주어진 문제를 정확하게 해결하는 정도&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;운영체제의-기능&#34;&gt;운영체제의 기능&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9Cos-operating-system%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1.png&#34;
	width=&#34;1112&#34;
	height=&#34;593&#34;
	srcset=&#34;https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9Cos-operating-system%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1_hu57fa94925a4dc6839767269c88c7c67b_36096_480x0_resize_box_3.png 480w, https://SSAFY-Seoul-CS-Study.github.io/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9Cos-operating-system%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EC%A7%80-%EC%84%A4%EB%AA%85%ED%95%B4%EC%A3%BC%EC%84%B8%EC%9A%94/images/Untitled1_hu57fa94925a4dc6839767269c88c7c67b_36096_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;운영체제의 기능 정리&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;187&#34;
		data-flex-basis=&#34;450px&#34;
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-메모리-관리&#34;&gt;1. 메모리 관리&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;컴퓨터의 메모리는 크게 메인 메모리 + 보조 기억 장치로 구분할 수 있다. 먼저, 메인 메모리에 명령어가 있어야 프로세서가 명령어를 수행할 수 있기 때문에 프로그램을 저장할 공간을 확보해두어야 하고 이렇게 저장된 프로그램이 효율적으로 실행될 수 있도록 메모리도 적절히 사용해야한다. 간단히 다음과 같이 정리할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;메모리에 저장할 프로그램을 저장한다.&lt;/li&gt;
&lt;li&gt;사용할 메모리 공간을 결정하고 어떤 프로그램이 사용하는지 확인한다.&lt;/li&gt;
&lt;li&gt;메모리를 할당하고 회수하는 방법을 정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;P.S. 메모리는 물리적인 하드웨어이기때문에 공간의 한계가 있다. 이를 위해 보조기억장치(보조메모리)가 필요하다. 대부분의 프로그램들은 메인 메모리에 저장되기 전까지는 보조 기억장치에 저장된다. 메인 메모리와 동일하게 공간을 할당하고 삭제하는 기능을 운영체제가 한다.&lt;/p&gt;
&lt;h3 id=&#34;2-프로세스-관리&#34;&gt;2. 프로세스 관리&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;프로세스는 실행중인 프로그램으로 운영체제는 프로세스의 생성 부터 실행, 종료까지의 전 과정에 관여하게 된다. 구체적으로 아래의 기능을 수행한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;프로세스와 스레드를 스케쥴링한다&lt;/li&gt;
&lt;li&gt;프로세스를 생성하고 제거한다&lt;/li&gt;
&lt;li&gt;프로세스를 중지하고 재수행한다&lt;/li&gt;
&lt;li&gt;프로세스 동기화 방법을 제공한다&lt;/li&gt;
&lt;li&gt;프로세스 통신 방법을 제공한다&lt;/li&gt;
&lt;li&gt;교착상태를 방지하는 방법을 제공한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-입출력-장치-관리&#34;&gt;3. 입출력 장치 관리&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;운영체제는 특수 장치 드라이브를 사용하여 입출력 장치와 상호작용한다. 따라서 장치 드라이버를 제공하여 특정 하드웨어와 서로 통신할 수 있는 인터페이스를 제공한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;특정 장치 드라이버를 제공한다&lt;/li&gt;
&lt;li&gt;드라이버 인터페이스를 제공한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-파일-관리&#34;&gt;4. 파일 관리&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;우리가 사용하는 파일 탐색기를 살펴보면 디렉터리 형식으로 파일이 관리되고 있고 탐색기 내에서 파일 검색이 가능하고 파일 생성과 삭제까지 가능하다. 이러한 기능을 바로 운영체제가 제공하는 것이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;파일을 생성하고 삭제한다&lt;/li&gt;
&lt;li&gt;디렉터리를 생성하고 삭제한다&lt;/li&gt;
&lt;li&gt;비휘발성 장치에 파일을 저장한다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5-시스템-보호&#34;&gt;5. 시스템 보호&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;시스템 보호는 컴퓨터 자원을 보호하는 기능이다. 응용프로그램, 사용자 로부터 자원을 보호하기 위해 권한을 부여하기도 하고 데이터를 암호화하기도 한다. 또한 프로세스들은 동시에 실행되면서 서로의 data에 접근하지 못하도록 보호하기도 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;6-네트워크&#34;&gt;6. 네트워크&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;프로세서가 통신을 할 때는 경로 설정, 접속 정책, 충돌, 보안 등을 고려해야하는데 이를 운영체제가 관리한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;7-명령-해석기&#34;&gt;7. 명령 해석기&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;명령 해석기는 운영체제의 중요한 프로그램이다. 사용자나 응용 프로그램으로부터 대화형의 명령어가 들어오면 이를 운영체제에 전달하는 인터페이스이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;운영체제의-관리-유형&#34;&gt;운영체제의 관리 유형&lt;/h2&gt;
&lt;h3 id=&#34;1세대-일괄처리-시스템&#34;&gt;1세대) 일괄처리 시스템&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;일괄 처리 시스템은 초기의 컴퓨터 시스템에서 사용된 형태로, 일정량 또는 일정 기간 동안 데이터를 모아서 한꺼번에 처리하는 방식&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;일괄처리를 위해 적절한 작업 제어 언어(Job Control Language)를 제공해야함&lt;/li&gt;
&lt;li&gt;컴퓨터 시스템을 효율적으로 사용할 수 있음&lt;/li&gt;
&lt;li&gt;반환시간(Turn Around Time)이 늦지만 하나의 작업이 모든 자원을 독점하므로 CPU 유휴 시간이 줄어듦&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2세대-다중-프로그래밍-시스템&#34;&gt;2세대) 다중 프로그래밍 시스템&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;다중 프로그래밍 시스템 (Multi-Programming System)은 하나의 CPU와 주기억장치를 이용하여 여러개의 프로그램을 동시에 처리하는 방식&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;하나의 주기억장치에 두개 이상의 프로그램을 기억시켜 놓고, 하나의 CPU와 대화 하면서 동시에 처리&lt;/li&gt;
&lt;li&gt;CPU의 사용률과 처리량이 증가&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2세대-시분할-시스템&#34;&gt;2세대) 시분할 시스템&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;시분할 시스템(Time Sharing System)은 여러 명의 사용자가 사용하는 시스템에서 컴퓨터가 사용자들의 프로그램을 번갈아가며 처리해줌으로써 각 사용자에게 독립된 컴퓨터를 사용하는 느낌을 줌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;여러 사용자가 각자의 단말장치를 통하여 동시에 운영체제와 대화하면서 각자의 프로그램을 실행&lt;/li&gt;
&lt;li&gt;하나의 CPU는 같은 시점에서 여러 개의 작업을 동시에 수행할 수 없기 때문에, CPU의 전체 사용시간을 작은 작업 시간량으로 쪼개어 그 시간량 동안만 번갈아가면서 CPU를 할당하여 각 작업을 처리&lt;/li&gt;
&lt;li&gt;다중프로그래밍 방식과 결합하여 모든 작업이 동시에 진행되는 것처럼 대화식 처리가 가능&lt;/li&gt;
&lt;li&gt;시스템의 전체 효율은 좋아지나 개인별 사용자 입장에서는 반응 속도가 느려질 수 있음&lt;/li&gt;
&lt;li&gt;각 작업에 대한 응답 시간을 최소한으로 줄이는 것을 목적으로 하며, 하드웨어를 보다 능률적으로 사용할 수 있음&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2세대-다중처리-시스템&#34;&gt;2세대) 다중처리 시스템&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;다중 처리 시스템(Multi-Processing System)은 여러개의 CPU와 하나의 주기억장치를 이용하여 여러 개의 프로그램을 동시에 처리하는 방식&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;하나의 CPU가 고장나더라도 다른 CPU를 이용하여 업무를 처리할 수 있으므로 시스템의 신뢰성과 안정성이 높음&lt;/li&gt;
&lt;li&gt;여러 CPU는 하나의 메모리를 공유하며 단일 운영체제에 의해 관리&lt;/li&gt;
&lt;li&gt;프로그램의 처리 속도는 빠르지만 기억장치, 입출력 장치 등의 자원 공유에 대한 문제점을 해결해야 함&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;2세대-실시간-처리-시스템&#34;&gt;2세대) 실시간 처리 시스템&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;실시간 처리 시스템(Real Time Processing System)은 데이터 발생 즉시, 또는 데이터 처리 요구가 있는 즉시 처리하여 결과를 산출하는 방식. 처리 시간이 단축되고, 처리 비용이 절감됩니다. 교통제어, 레이더 추적기, 은행의 온라인 업무 등 시간에 제한을 두고 수행되어야 하는 작업에 주로 사용됨&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;3세대-다중-모드-처리&#34;&gt;3세대) 다중 모드 처리&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;다중 모드 처리(Multi- Mode Processing)은 일괄 처리 시스템, 시분할 시스템, 다중 처리 시스템, 실시간 처리 시스템을 한 시스템에서 모두 제공하는 방식&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;4세대-분산-처리-시스템&#34;&gt;4세대) 분산 처리 시스템&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;분산 처리 시스템(Distributed Processing System)은 여러개의 컴퓨터(프로세서)를 통신 회선으로 연결하여 하나의 작업을 처리하는 방식. 각 단말장치나 컴퓨터 시스템은 고유의 운영체제와 CPU, 메모리를 가지고 있음&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        
    </channel>
</rss>
